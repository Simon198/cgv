"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[253],{2253:function(e,r,t){t.d(r,{J:function(){return O}});var s=t(7340),n=t(598),a=t(892),o=t(5900),i=t(6621),p=t(5770);function l(e){return r=>t=>t.pipe((0,p.dF)((([r,t])=>(0,s.of)(e(r,t))),(e=>e),r))}function u(e){return r=>t=>t.pipe((0,p.dF)((([r])=>(0,s.of)(e(r))),(e=>e),r))}const m=(0,n.U)((e=>c(e)));function c(e,r=0){return Array.isArray(e)?e.map(c):Object.assign(Object.assign({},e),{value:r})}const y=(0,n.U)((([{value:[e]}])=>e));function f(e,r){const[t,s]=e,l=r.pipe((0,n.U)((e=>[e])),(0,p.bS)([]),(0,a.d)({bufferSize:1,refCount:!0}));return(0,o.T)(l,l.pipe(y,t,(0,p.bS)([1])),l.pipe(y,s,(0,p.bS)([2]))).pipe((0,p.Jh)(),(0,i.h)((e=>3===e.reduce(((e,r)=>r?e+1:e),0))),(0,n.U)((([e,r,t])=>b(e,r,t))))}function b(e,r,t){return Array.isArray(r)&&Array.isArray(t)&&Array.isArray(e)&&e.length===r.length&&e.length===t.length?e.map(((e,s)=>{const n=r[s],a=t[s];return Array.isArray(e)&&Array.isArray(n)&&Array.isArray(a)?b(e,n,a):e})).filter(((e,s)=>{const n=r[s],a=t[s];return!(!Array.isArray(n)&&!Array.isArray(a))||n.value<=s&&s<a.value})):!Array.isArray(r)&&!Array.isArray(t)&&!Array.isArray(e)&&r.value<=0&&0<t.value?e:[]}function h(e,r){const t=e[0],s=r.pipe((0,n.U)((e=>[e])),(0,p.bS)([]),(0,a.d)({bufferSize:1,refCount:!0})),l=s.pipe(y,t,(0,p.bS)([1]),(0,a.d)({bufferSize:1,refCount:!0}));return(0,o.T)(...new Array((e.length-1)/2).fill(null).map(((r,t)=>(0,o.T)(s,l,s.pipe(y,e[2*t+1],(0,p.bS)([2]))).pipe((0,p.Jh)(),(0,i.h)((e=>3===e.reduce(((e,r)=>r?e+1:e),0))),(0,n.U)((([e,r,t])=>S(e,r,t))),e[2*t+2],(0,n.U)((e=>[{index:[t],type:p.u4.SET,value:e}])))))).pipe((0,p.Jh)())}function S(e,r,t){if(Array.isArray(r)&&Array.isArray(e)&&Array.isArray(t)&&r.length===e.length&&r.length===t.length){const s=[];for(let n=0;n<r.length;n++){const a=t[n],o=r[n];if(Array.isArray(o)||Array.isArray(a)||o.value===a.value){const r=e[n],a=t[n];let i;if(Array.isArray(r)&&Array.isArray(a)){if(i=S(r,o,a),Array.isArray(i)&&0===i.length)continue}else i=r;s.push(i)}}return s}return Array.isArray(r)||Array.isArray(t)||Array.isArray(e)||r.value!==t.value?[]:e}function d(e,r){const t=e[0],[,s,l]=e,u=r.pipe((0,n.U)((e=>[e])),(0,p.bS)([]),(0,a.d)({bufferSize:1,refCount:!0}));return(0,o.T)(u,u.pipe(y,t,(0,p.bS)([1]))).pipe((0,p.Jh)(),(0,i.h)((e=>2===e.reduce(((e,r)=>r?e+1:e),0))),(0,p.Ud)([e=>e.pipe((0,n.U)((([e,r])=>w(e,r,!0))),s),e=>e.pipe((0,n.U)((([e,r])=>w(e,r,!1))),l)]))}function w(e,r,t){if(Array.isArray(r)&&Array.isArray(e)&&r.length===e.length){const s=[];for(let n=0;n<e.length;n++){const a=r[n];if(Array.isArray(a)||a.value===t){const r=e[n];let o;if(Array.isArray(r)){if(o=w(r,a,t),Array.isArray(o)&&0===o.length)continue}else o=r;s.push(o)}}return s}return Array.isArray(r)||Array.isArray(e)||r.value!==t?[]:e}const O={"+":l(((e,r)=>e+r)),"-":l(((e,r)=>e-r)),"/":l(((e,r)=>e/r)),"*":l(((e,r)=>e*r)),"%":l(((e,r)=>e%r)),"!-":u((e=>-e)),"!":u((e=>!e)),"&&":l(((e,r)=>e&&r)),"||":l(((e,r)=>e||r)),"<":l(((e,r)=>e<r)),"<=":l(((e,r)=>e<=r)),"==":l(((e,r)=>e==r)),"!=":l(((e,r)=>e!=r)),if:e=>d.bind(null,e),switch:e=>h.bind(null,e),select:e=>f.bind(null,e),index:()=>m}},5770:function(e,r,t){t.d(r,{u4:function(){return i},bS:function(){return C},Tr:function(){return D},Jh:function(){return B},br:function(){return R},Un:function(){return _},Ii:function(){return X},Au:function(){return g},vj:function(){return M},PA:function(){return T},Ud:function(){return Q},S9:function(){return v},dF:function(){return F},Qc:function(){return o},fX:function(){return A},fT:function(){return z}});var s=t(7606),n=t(5454);const a=s.Grammar.fromCompiled(n.Z);function o(e){const r=new s.Parser(a);if(r.feed(e),0===r.results.length)throw new Error("unexpected end of input");return r.results[0]}var i,p=t(3741),l=t(7340),u=t(7506),m=t(3184),c=t(1556),y=t(598),f=t(2598),b=t(6728),h=t(4668),S=t(6431),d=t(4340),w=t(879),O=t(1952);function A(e){return r=>r.pipe((0,p.w)((e=>(0,l.of)(...e))),(0,u.v)(k,{connector:()=>new m.t(1)}),(0,c.z)((e=>e.pipe((0,p.w)((e=>e.type===i.UNSET?(0,l.of)(e):e.value.pipe((0,y.U)((r=>Object.assign(Object.assign({},e),{value:r}))))))))),R(e))}function v(e){return r=>{const t=new Map;return r.pipe(T(),(0,c.z)((r=>{const s=new Map;for(const n of r){const[r,a]=e(n.index),o=x(r);t.has(o)||t.set(o,r);let i=s.get(o);null==i&&(i={outer:r,changes:[]},s.set(o,i)),i.changes.push(Object.assign(Object.assign({},n),{index:a}))}return(0,l.of)(...Array.from(s.values()))})),(0,u.v)((({outer:e})=>x(e)),{connector:()=>new m.t(1/0,100)}),(0,y.U)((e=>{const r=t.get(e.key),s=e.pipe((0,f.R)(((e,{changes:r})=>q(e,r)),[]));return{index:r,type:i.SET,value:s}})))}}function x(e){for(let r=e.length-1;r>=0;r--)if(0!==e[r])return e.slice(0,r+1).join(",");return""}function g(e,r){return Array.isArray(e)?e.map((e=>g(e,r))):r(e)}function _(e,r){return Array.isArray(e)?e.map((e=>Array.isArray(e)?_(e,r):e)).filter((e=>Array.isArray(e)?e.length>0:r(e))):r(e)?e:[]}!function(e){e[e.SET=0]="SET",e[e.UNSET=1]="UNSET"}(i||(i={}));const E=[];function P(e,r,t=[]){if(null==r)return[{index:t,type:i.UNSET}];if(Array.isArray(r)){const s=Array.isArray(e)?e:E,n=Math.max(s.length,r.length);return new Array(n).fill(null).reduce(((e,n,a)=>[...e,...P(s[a],r[a],[...t,a])]),[])}return[{index:t,type:i.SET,value:r}]}function q(e,r){for(const t of r)e=U(e,t.index,t);return e}function U(e,r,t){if(0===r.length)return t.type===i.SET?t.value:[];Array.isArray(e)||(e=[]);const s=r[0];return[...$(e.slice(0,s),s),U(e[s],r.slice(1),t),...e.slice(s+1)]}function $(e,r){return e.length<r?e.concat(new Array(r-e.length)):e}function k(e){return x(e.index)}function T(){return e=>e.pipe((0,b.O)(void 0),(0,h.G)(),(0,y.U)((([e,r])=>P(e,r))))}function C(e){return(0,y.U)((r=>[{index:e,type:i.SET,value:r}]))}function B(){return(0,f.R)(((e,r)=>q(e,r)),[])}function R(e){return r=>{const t=new m.t(1);return r.pipe((0,S.b)((()=>t.next())),(0,d.f)(t.pipe((0,w.b)(e))),(0,O.x)((()=>t.complete())))}}function D(){return e=>e.pipe((0,f.R)(((e,r)=>(e[1]=[],e[0]=function(e,r,t){for(const s of r)e=j(e,t,s.index,s,0);return e}(e[0],r,e[1]),e)),[{amount:0,value:[]},[]]),(0,y.U)((([,e])=>e)))}function j(e,r,t,s,n){var a,o,p,l,u;if(0===t.length)return s.type===i.SET?(r.push({index:n,type:i.SET,value:s.value,deleteAmount:e.amount}),{amount:1,value:s.value}):(r.push({index:n,type:i.UNSET,deleteAmount:e.amount}),{amount:0,value:[]});Array.isArray(e.value)||(e.amount=0,e.value=[]);const m=t[0];let c=0;for(let i=0;i<m;i++)c+=null!==(o=null===(a=e.value[i])||void 0===a?void 0:a.amount)&&void 0!==o?o:0;const y=null!==(l=null===(p=e.value[m])||void 0===p?void 0:p.amount)&&void 0!==l?l:0;return e.value[m]=j(null!==(u=e.value[m])&&void 0!==u?u:{amount:0,value:[]},r,t.slice(1),s,n+c),e.amount+=e.value[m].amount-y,e}function M(){return(0,y.U)(I)}function I(e){return Array.isArray(e)?e.reduce(((e,r)=>e.concat(I(r))),[]):[e]}var N=t(892),G=t(8761);const L=new Map;function z(e){return e}function J(e){return[e.slice(1),[e[0]]]}function F(e,r,t,s=J,n,a=10){const o=r=>{if(null==r)return(0,l.of)([]);const t=function(e){const r={};for(const t of e){const e=Object.entries(t.eventDepthMap);for(const t of e){const[e,s]=t;if(null==s)continue;const n=r[e];(null==n||s>n)&&(r[t[0]]=t[1])}}return r}(r),s=r.reduce(((e,r)=>Object.assign(Object.assign({},e),r.parameters)),{});return e(r.map((({value:e})=>e))).pipe((0,y.U)((e=>g(e,(e=>({eventDepthMap:t,parameters:s,terminated:!1,value:e}))))))},i=null==r?e=>e.pipe((0,p.w)(o)):function(e,r){let t=L.get(r);null==t&&(t=[],L.set(r,t));const s=t;return t=>t.pipe((0,y.U)((t=>{if(null==t)return(0,l.of)(void 0);const n=e(t);let a=s.find((([e])=>function(e,r){if(e.length!=r.length)return!1;for(let t=0;t<e.length;t++)if(e[t]!=r[t])return!1;return!0}(e,n)));if(null==a){const e=r(t).pipe((0,N.d)({refCount:!1,bufferSize:1}));a=[n,e],s.push(a)}return a[1]})),(0,G.B)())}((e=>r(e.map((({value:e})=>e)))),o);return e=>e.pipe(Q(t),v(s),(0,y.U)((e=>Object.assign(Object.assign({},e),{value:e.value.pipe(M(),(0,y.U)((e=>t.length===e.length?e:void 0)),i,(0,y.U)((e=>null==e?[]:e)))}))),R(a),A(a),B())}var K=t(5900),V=t(4534),W=t(260),Z=t(8482);function X(e,r){const t=Object.values(e);return 0===t.length?e=>e:H(t[0],e,r)}function Q(e){return r=>{const t=r.pipe((0,N.d)({refCount:!0,bufferSize:1}));return(0,K.T)(...e.map(((e,r)=>t.pipe(e,(0,y.U)((e=>[{index:[r],type:i.SET,value:e}])))))).pipe(B())}}function H(e,r,t){switch(e.type){case"operation":{const s=t[e.identifier];return null==s?()=>(0,V._)((()=>new Error(`unknown operation "${e.identifier}"`))):s(e.parameters.map((e=>H(e,r,t))))}case"parallel":return Q(e.steps.map((e=>H(e,r,t))));case"raw":{const r={eventDepthMap:{},terminated:!1,value:e.value,parameters:{}};return e=>e.pipe((0,y.U)((e=>g(e,(()=>r)))))}case"sequential":return s=>{let n=s;const a=[];for(const o of e.steps){const e=n.pipe((0,N.d)({refCount:!0,bufferSize:1}));a.push(e.pipe(Y(!0))),n=e.pipe(Y(!1),H(o,r,t))}return(0,W.a)([n,...a])};case"this":return e=>e;case"return":return(0,y.U)((e=>g(e,(e=>Object.assign(Object.assign({},e),{terminated:!0})))));case"symbol":{const s=r[e.identifier];return null==s?()=>(0,V._)((()=>new Error(`unknown rule "${e.identifier}"`))):e=>(0,Z.P)((()=>e.pipe(H(s,r,t))))}}}function Y(e){return(0,y.U)((r=>_(r,(r=>r.terminated===e))))}},5454:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){var moo__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(985),moo__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(moo__WEBPACK_IMPORTED_MODULE_0__);function id(e){return e[0]}const lexer=moo__WEBPACK_IMPORTED_MODULE_0___default().compile({returnSymbol:/return/,thisSymbol:/this/,ifSymbol:/if/,thenSymbol:/then/,elseSymbol:/else/,switchSymbol:/switch/,caseSymbol:/case/,arrow:/->/,openBracket:/\(/,closedBracket:/\)/,point:/\./,comma:/,/,colon:/:/,smallerEqual:/<=/,greaterEqual:/>=/,smaller:/</,greater:/>/,equal:/==/,unequal:/!=/,and:/&&/,or:/\|\|/,not:/!/,parallel:/\|/,int:/0[Xx][\da-fA-F]+|0[bB][01]+/,number:/-?\d+(?:\.\d+)?/,string:/"[^"]*"/,boolean:/true|false/,plus:/\+/,minus:/-/,multiply:/\*/,modulo:/%/,divide:/\//,identifier:/[a-zA-Z_$]+\w*/,ws:{match:/\s+/,lineBreaks:!0}}),grammar={Lexer:lexer,ParserRules:[{name:"GrammarDefinition",symbols:["ws","RuleDefinition","ws"],postprocess:([,[e,r]])=>({[e]:r})},{name:"GrammarDefinition",symbols:["ws","RuleDefinition",lexer.has("ws")?{type:"ws"}:ws,"GrammarDefinition"],postprocess:([,[e,r],,t])=>Object.assign({[e]:r},t)},{name:"GrammarDefinition",symbols:["ws"],postprocess:()=>({})},{name:"RuleDefinition",symbols:[lexer.has("identifier")?{type:"identifier"}:identifier,"ws",lexer.has("arrow")?{type:"arrow"}:arrow,"ws","Steps"],postprocess:([{value:e},,,,r])=>[e,r]},{name:"Steps",symbols:["ParallelSteps"],postprocess:([e])=>e},{name:"EmptySteps",symbols:["ParallelSteps"],postprocess:([e])=>e},{name:"EmptySteps",symbols:[],postprocess:()=>({type:"raw",value:[]})},{name:"ParallelSteps$ebnf$1",symbols:["ParallelStep"]},{name:"ParallelSteps$ebnf$1",symbols:["ParallelSteps$ebnf$1","ParallelStep"],postprocess:e=>e[0].concat([e[1]])},{name:"ParallelSteps",symbols:["SequentialSteps","ParallelSteps$ebnf$1"],postprocess:([e,r])=>({type:"parallel",steps:[e,...r]})},{name:"ParallelSteps",symbols:["SequentialSteps"],postprocess:([e])=>e},{name:"ParallelStep",symbols:["ws",lexer.has("parallel")?{type:"parallel"}:parallel,"SequentialSteps"],postprocess:([,,e])=>e},{name:"SequentialSteps$ebnf$1",symbols:["SequentialStep"]},{name:"SequentialSteps$ebnf$1",symbols:["SequentialSteps$ebnf$1","SequentialStep"],postprocess:e=>e[0].concat([e[1]])},{name:"SequentialSteps",symbols:["PrimarySteps","SequentialSteps$ebnf$1"],postprocess:([e,r])=>({type:"sequential",steps:[e,...r]})},{name:"SequentialSteps",symbols:["PrimarySteps"],postprocess:([e])=>e},{name:"SequentialStep",symbols:[lexer.has("ws")?{type:"ws"}:ws,"PrimarySteps"],postprocess:([,e])=>e},{name:"PrimarySteps",symbols:["ws","BasicOperation"],postprocess:([,e])=>e},{name:"Step",symbols:["Operation"],postprocess:([e])=>e},{name:"Step",symbols:["Symbol"],postprocess:([e])=>e},{name:"Step",symbols:[lexer.has("thisSymbol")?{type:"thisSymbol"}:thisSymbol],postprocess:()=>({type:"this"})},{name:"Step",symbols:["Variable"],postprocess:()=>({})},{name:"Step",symbols:["Constant"],postprocess:([e])=>({type:"raw",value:e})},{name:"Step",symbols:["ConditionalOperation"],postprocess:([e])=>e},{name:"Step",symbols:[lexer.has("returnSymbol")?{type:"returnSymbol"}:returnSymbol],postprocess:()=>({type:"return"})},{name:"Step",symbols:[lexer.has("openBracket")?{type:"openBracket"}:openBracket,"Steps","ws",lexer.has("closedBracket")?{type:"closedBracket"}:closedBracket],postprocess:([,e])=>e},{name:"Operation",symbols:[lexer.has("identifier")?{type:"identifier"}:identifier,lexer.has("openBracket")?{type:"openBracket"}:openBracket,"EmptyParameters","ws",lexer.has("closedBracket")?{type:"closedBracket"}:closedBracket],postprocess:([{value:e},,r])=>({type:"operation",parameters:r,identifier:e})},{name:"EmptyParameters",symbols:["Parameters"],postprocess:([e])=>e},{name:"EmptyParameters",symbols:[],postprocess:()=>[]},{name:"Parameters$ebnf$1",symbols:["Parameter"]},{name:"Parameters$ebnf$1",symbols:["Parameters$ebnf$1","Parameter"],postprocess:e=>e[0].concat([e[1]])},{name:"Parameters",symbols:["Steps","Parameters$ebnf$1"],postprocess:([e,r])=>[e,...r]},{name:"Parameters",symbols:["Steps"],postprocess:([e])=>[e]},{name:"Parameter",symbols:["ws",lexer.has("comma")?{type:"comma"}:comma,"Steps"],postprocess:([,,e])=>e},{name:"Symbol",symbols:[lexer.has("identifier")?{type:"identifier"}:identifier],postprocess:([{value:e}])=>({type:"symbol",identifier:e})},{name:"JS",symbols:[lexer.has("js")?{type:"js"}:js],postprocess:([{value:value}])=>eval(value.replace(/"([^"]+)"/,((e,r)=>r)))},{name:"ws",symbols:[lexer.has("ws")?{type:"ws"}:ws]},{name:"ws",symbols:[]},{name:"Constant",symbols:[lexer.has("boolean")?{type:"boolean"}:boolean],postprocess:([{value:e}])=>"true"===e},{name:"Constant",symbols:[lexer.has("string")?{type:"string"}:string],postprocess:([{value:e}])=>e.slice(1,-1)},{name:"Constant",symbols:[lexer.has("number")?{type:"number"}:number],postprocess:([{value:e}])=>Number.parseFloat(e)},{name:"Constant",symbols:[lexer.has("int")?{type:"int"}:int],postprocess:([{value:e}])=>Number.parseInt(e)},{name:"Variable",symbols:[lexer.has("thisSymbol")?{type:"thisSymbol"}:thisSymbol,lexer.has("point")?{type:"point"}:point,lexer.has("identifier")?{type:"identifier"}:identifier]},{name:"AssignVariable",symbols:["Variable","ws",lexer.has("equal")?{type:"equal"}:equal,"ws","Step"]},{name:"ConditionalOperation",symbols:["IfThenElseOperation"],postprocess:([e])=>e},{name:"ConditionalOperation",symbols:["SwitchOperation"],postprocess:([e])=>e},{name:"IfThenElseOperation",symbols:[lexer.has("ifSymbol")?{type:"ifSymbol"}:ifSymbol,lexer.has("ws")?{type:"ws"}:ws,"Step",lexer.has("ws")?{type:"ws"}:ws,lexer.has("thenSymbol")?{type:"thenSymbol"}:thenSymbol,lexer.has("ws")?{type:"ws"}:ws,"Step",lexer.has("ws")?{type:"ws"}:ws,lexer.has("elseSymbol")?{type:"elseSymbol"}:elseSymbol,lexer.has("ws")?{type:"ws"}:ws,"Step"],postprocess:([,,e,,,,r,,,,t])=>({type:"operation",parameters:[e,r,t],identifier:"if"})},{name:"SwitchOperation$ebnf$1",symbols:["SwitchCase"]},{name:"SwitchOperation$ebnf$1",symbols:["SwitchOperation$ebnf$1","SwitchCase"],postprocess:e=>e[0].concat([e[1]])},{name:"SwitchOperation",symbols:[lexer.has("switchSymbol")?{type:"switchSymbol"}:switchSymbol,lexer.has("ws")?{type:"ws"}:ws,"Step","SwitchOperation$ebnf$1"],postprocess:([,,e,r])=>({type:"operation",parameters:[e,...r.reduce(((e,r)=>e.concat(r)))],identifier:"switch"})},{name:"SwitchCase",symbols:[lexer.has("ws")?{type:"ws"}:ws,lexer.has("caseSymbol")?{type:"caseSymbol"}:caseSymbol,lexer.has("ws")?{type:"ws"}:ws,"Step",lexer.has("colon")?{type:"colon"}:colon,"ws","Step"],postprocess:([,,,e,,,r])=>[e,r]},{name:"BasicOperation",symbols:["BooleanOperation"],postprocess:([e])=>e},{name:"BooleanOperation",symbols:["OrOperation"],postprocess:([e])=>e},{name:"OrOperation",symbols:["OrOperation","ws",lexer.has("or")?{type:"or"}:or,"ws","AndOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"||"})},{name:"OrOperation",symbols:["AndOperation"],postprocess:([e])=>e},{name:"AndOperation",symbols:["AndOperation","ws",lexer.has("and")?{type:"and"}:and,"ws","NegateOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"&&"})},{name:"AndOperation",symbols:["NegateOperation"],postprocess:([e])=>e},{name:"NegateOperation",symbols:[lexer.has("not")?{type:"not"}:not,"ws","NegateOperation"],postprocess:([,,e])=>({type:"operation",parameters:[e],identifier:"!"})},{name:"NegateOperation",symbols:["ComparisonOperation"],postprocess:([e])=>e},{name:"ComparisonOperation",symbols:["EquityOperation"],postprocess:([e])=>e},{name:"EquityOperation",symbols:["EqualOperation"],postprocess:([e])=>e},{name:"EquityOperation",symbols:["UnequalOperation"],postprocess:([e])=>e},{name:"EquityOperation",symbols:["RelationalOperation"],postprocess:([e])=>e},{name:"EqualOperation",symbols:["EquityOperation","ws",lexer.has("equal")?{type:"equal"}:equal,"ws","RelationalOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"=="})},{name:"UnequalOperation",symbols:["EquityOperation","ws",lexer.has("unequal")?{type:"unequal"}:unequal,"ws","RelationalOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"!="})},{name:"RelationalOperation",symbols:["SmallerOperation"],postprocess:([e])=>e},{name:"RelationalOperation",symbols:["SmallerEqualOperation"],postprocess:([e])=>e},{name:"RelationalOperation",symbols:["GreaterOperation"],postprocess:([e])=>e},{name:"RelationalOperation",symbols:["GreaterEqualOperation"],postprocess:([e])=>e},{name:"RelationalOperation",symbols:["ArithmeticOperation"],postprocess:([e])=>e},{name:"SmallerOperation",symbols:["RelationalOperation","ws",lexer.has("smaller")?{type:"smaller"}:smaller,"ws","ArithmeticOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"<"})},{name:"SmallerEqualOperation",symbols:["RelationalOperation","ws",lexer.has("smallerEqual")?{type:"smallerEqual"}:smallerEqual,"ws","ArithmeticOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"<="})},{name:"GreaterOperation",symbols:["RelationalOperation","ws",lexer.has("greater")?{type:"greater"}:greater,"ws","ArithmeticOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[r,e],identifier:"<"})},{name:"GreaterEqualOperation",symbols:["RelationalOperation","ws",lexer.has("greaterEqual")?{type:"greaterEqual"}:greaterEqual,"ws","ArithmeticOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[r,e],identifier:"<="})},{name:"ArithmeticOperation",symbols:["LineOperation"],postprocess:([e])=>e},{name:"LineOperation",symbols:["AddOperation"],postprocess:([e])=>e},{name:"LineOperation",symbols:["SubtractOperation"],postprocess:([e])=>e},{name:"LineOperation",symbols:["PointOperation"],postprocess:([e])=>e},{name:"AddOperation",symbols:["LineOperation","ws",lexer.has("plus")?{type:"plus"}:plus,"ws","PointOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"+"})},{name:"SubtractOperation",symbols:["LineOperation","ws",lexer.has("minus")?{type:"minus"}:minus,"ws","PointOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"-"})},{name:"PointOperation",symbols:["MultiplyOperation"],postprocess:([e])=>e},{name:"PointOperation",symbols:["DivideOperation"],postprocess:([e])=>e},{name:"PointOperation",symbols:["ModuloOperation"],postprocess:([e])=>e},{name:"PointOperation",symbols:["InvertOperation"],postprocess:([e])=>e},{name:"DivideOperation",symbols:["PointOperation","ws",lexer.has("divide")?{type:"divide"}:divide,"ws","InvertOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"/"})},{name:"MultiplyOperation",symbols:["PointOperation","ws",lexer.has("multiply")?{type:"multiply"}:multiply,"ws","InvertOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"*"})},{name:"ModuloOperation",symbols:["PointOperation","ws",lexer.has("modulo")?{type:"modulo"}:modulo,"ws","InvertOperation"],postprocess:([e,,,,r])=>({type:"operation",parameters:[e,r],identifier:"%"})},{name:"InvertOperation",symbols:[lexer.has("minus")?{type:"minus"}:minus,"ws","InvertOperation"],postprocess:([,,e])=>({type:"operation",parameters:[e],identifier:"!-"})},{name:"InvertOperation",symbols:["Step"],postprocess:([e])=>e}],ParserStart:"GrammarDefinition"};__webpack_exports__.Z=grammar}}]);